import groovy.text.SimpleTemplateEngine

import org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath gradleApi()
    }
}

repositories {
    mavenCentral()
}

configurations {
    junit
}

dependencies {
    junit 'junit:junit:4.8.2'
}

apply plugin: 'base'

task small(type: GeneratorTask, description: 'Generates a small project') {
    destDir = new File(buildDir, 'small')
}

task largeSrc(type: GeneratorTask, description: 'Generates a single project with lots of source files') {
    destDir = new File(buildDir, 'largeSrc')
    sourceFiles = 1000
}

task multi(type: GeneratorTask, description: 'Generates a multi-project build') {
    destDir = new File(buildDir, 'multi')
    projects = 25
    sourceFiles = 100
}

task multiGroovy(type: GeneratorTask, description: 'Generates a multi-project groovy build') {
    destDir = new File(buildDir, 'multiGroovy')
    projects = 25
    groovyProject = true
}

task all(dependsOn: {tasks.withType(GeneratorTask).all})

class GeneratorTask extends DefaultTask {
    @OutputDirectory
    File destDir
    @Input
    int sourceFiles = 1
    @Input
    int projects = 1
    @Input
    boolean groovyProject


    def GeneratorTask() {
        outputs.upToDateWhen { false }
    }

    @TaskAction
    void generate() {
        ant.delete(dir: destDir)
        destDir.mkdirs()

        generateRootProject()
        subprojectNames.each {
            generateSubProject(it)
        }
    }

    List getSubprojectNames() {
        if (projects == 1) {
            return []
        }
        List result = []
        projects.times {result << "project${it + 1}" }
        result
    }

    def generateRootProject() {
        generateProject projectName: 'root', subprojects: subprojectNames, projectDir: destDir,
                files: subprojectNames.empty ? [] : ['settings.gradle'],
                includeSource: subprojectNames.empty

        Configuration configuration = project.configurations.junit
        configuration.each {
            ant.copy(file: it, toDir: new File(destDir, 'lib/test'))
        }
    }

    def generateSubProject(String name) {
        generateProject projectName: name, subprojects: [], projectDir: new File(destDir, name), files: [],
                includeSource: true
    }

    def generateProject(Map args) {
        File projectDir = args.projectDir
        println "Generating $args.projectName"

        List files = args.files + [
                'build.gradle',
                'common.gradle',
                'pom.xml',
                'build.xml',
        ]

        Closure generate = {String name, String templateName, Map templateArgs ->
            SimpleTemplateEngine engine = new SimpleTemplateEngine()
            File destFile = new File(projectDir, name)
            File srcTemplate = project.file("src/templates/$templateName")
            destFile.parentFile.mkdirs()
            destFile.withWriter {Writer writer ->
                engine.createTemplate(srcTemplate).make(templateArgs).writeTo(writer)
            }
        }

        args += [groovyProject: groovyProject]

        files.each {String name ->
            generate(name, name, args)
        }

        if (args.includeSource) {
            sourceFiles.times {
                String packageName = "org.gradle.test.performance${(int) (it / 100) + 1}"
                Map classArgs = args + [packageName: packageName, productionClassName: "Production${it + 1}", testClassName: "Test${it + 1}"]
                generate("src/main/java/${packageName.replace('.', '/')}/${classArgs.productionClassName}.java", 'Production.java', classArgs)
                generate("src/test/java/${packageName.replace('.', '/')}/${classArgs.testClassName}.java", 'Test.java', classArgs)
            }
            if (groovyProject) {
                sourceFiles.times {
                    String packageName = "org.gradle.test.performance${(int) (it / 100) + 1}"
                    Map classArgs = args + [packageName: packageName, productionClassName: "ProductionGroovy${it + 1}", testClassName: "TestGroovy${it + 1}"]
                    generate("src/main/groovy/${packageName.replace('.', '/')}/${classArgs.productionClassName}.groovy", 'Production.groovy', classArgs)
                    generate("src/test/groovy/${packageName.replace('.', '/')}/${classArgs.testClassName}.groovy", 'Test.groovy', classArgs)
                }
            }
        }
    }
}
